
import socket
import requests
import subprocess
print(r"""

███████╗██╗  ██╗██╗███████╗██╗     ██████╗ ███████╗ ██████╗ █████╗ ███╗   ██╗
██╔════╝██║  ██║██║██╔════╝██║     ██╔══██╗██╔════╝██╔════╝██╔══██╗████╗  ██║
███████╗███████║██║█████╗  ██║     ██║  ██║███████╗██║     ███████║██╔██╗ ██║
╚════██║██╔══██║██║██╔══╝  ██║     ██║  ██║╚════██║██║     ██╔══██║██║╚██╗██║
███████║██║  ██║██║███████╗███████╗██████╔╝███████║╚██████╗██║  ██║██║ ╚████║
╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚═════╝ ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝
                                                                             

    """
)



def scan_open_ports(target, ports):
    print("\n--- Scanning Open Ports ---")
    open_ports = []
    for port in ports:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(1)
            result = s.connect_ex((target, port))
            if result == 0:
                open_ports.append(port)
    return open_ports

def check_website_headers(target_url):
    print("\n--- Checking Website Headers ---")
    try:
        response = requests.get(target_url)
        headers = response.headers
        return headers
    except Exception as e:
        return f"Error: {e}"

def check_outdated_software():
    print("\n--- Checking Outdated Software ---")
    try:
        outdated_packages = subprocess.run(
            ["pip", "list", "--outdated"],
            stdout=subprocess.PIPE,
            text=True
        )
        return outdated_packages.stdout
    except Exception as e:
        return f"Error: {e}"

def main():
    print("Simple Vulnerability Scanner")
    target = input("Enter the target IP or domain (e.g., 192.168.1.1 or example.com): ")
    target_url = f"http://{target}"

    # 1. Scan for open ports
    ports = [21, 22, 23, 80, 443, 8080]  # Common ports to scan
    open_ports = scan_open_ports(target, ports)
    if open_ports:
        print(f"Open Ports Found: {open_ports}")
    else:
        print("No open ports found.")

    # 2. Check HTTP headers for basic misconfigurations
    headers = check_website_headers(target_url)
    if isinstance(headers, dict):
        print("HTTP Headers:")
        for key, value in headers.items():
            print(f"{key}: {value}")
        # Check for missing security headers
        missing_headers = []
        if "Strict-Transport-Security" not in headers:
            missing_headers.append("Strict-Transport-Security (HSTS)")
        if "Content-Security-Policy" not in headers:
            missing_headers.append("Content-Security-Policy (CSP)")
        if "X-Content-Type-Options" not in headers:
            missing_headers.append("X-Content-Type-Options")
        if "X-Frame-Options" not in headers:
            missing_headers.append("X-Frame-Options")

        if missing_headers:
            print("\nMissing Security Headers:")
            for header in missing_headers:
                print(f"- {header}")
        else:
            print("\nAll recommended security headers are present.")
    else:
        print(headers)  # Display error

    # 3. Check for outdated software
    outdated = check_outdated_software()
    print("\nOutdated Software (if any):")
    print(outdated)

if __name__ == "__main__":
    main()
